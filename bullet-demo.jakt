import bullet {
    btBoxShape,
    btCollisionDispatcher,
    btCollisionShape,
    btDbvtBroadphase,
    btDefaultCollisionConfiguration,
    btDefaultMotionState,
    btDiscreteDynamicsWorld,
    btRigidBody,
    btSequentialImpulseConstraintSolver,
    btSphereShape,
    btTransform,
    btVector3,
}

// import extern "memory" {
//     namespace std {
//         extern struct unique_ptr<T> {
//             function release(mut this) -> raw T
//         }
//     }
// }

import extern "vector" {
    namespace std {
        extern struct vector<T> {
            function vector<T>() -> vector<T>
            function empty(this) -> bool
        }
    }
}

import extern "bullet-demo-support.hpp" {
    extern function cast<T, U>(anon u: raw U) -> raw T
}

// class DynamicsWorldStore {
//     collision_configuration: btDefaultCollisionConfiguration
//     dispatcher: btCollisionDispatcher
// }

function main() {
    mut collision_configuration = btDefaultCollisionConfiguration()
    mut dispatcher = btCollisionDispatcher(&raw collision_configuration)
    mut overlapping_pair_cache = btDbvtBroadphase()
    mut solver = btSequentialImpulseConstraintSolver()
    mut world = btDiscreteDynamicsWorld(
        dispatcher: &raw dispatcher,
        overlapping_pair_cache: &raw overlapping_pair_cache,
        solver: &raw solver,
        collision_configuration: &raw collision_configuration,
    )
    defer {
        clean_dynamics_world(&mut world)
    }
    mut ground_shape = btBoxShape(btVector3(50f32, 50f32, 50f32))
    init_body(
        world: &mut world,
        shape: cast<btCollisionShape>(&raw ground_shape),
        mass: 0f32,
        origin: btVector3(0f32, -56f32, 0f32),
    )
    mut sphere_shape = btSphereShape(1f32)
    let v = std::vector<i32>()
    if v.empty() {
        println("PASS")
    }
    let x = [1, 2, 3]
    println("{}", x[1])
}

function clean_dynamics_world(anon world: &mut btDiscreteDynamicsWorld) {
    let num = world.getNumCollisionObjects()
    for i in 0..num {
        mut obj = world.getCollisionObjectArray().at(num - i - 1)
        let body = btRigidBody::upcast(obj)
        unsafe {
            cpp {
                "if (body && body->getMotionState()) {"
                "    delete body->getMotionState();"
                "}"
            }
        }
        world.removeCollisionObject(obj);
        unsafe { cpp { "delete obj;" } }
    }
}

function init_body(world: &mut btDiscreteDynamicsWorld, shape: raw btCollisionShape, mass: f32, origin: btVector3) {
    mut transform = btTransform()
    transform.setIdentity()
    transform.setOrigin(&origin)
    let is_dynamic = mass != 0f32
    mut local_inertia = btVector3(0f32, 0f32, 0f32)
    if (is_dynamic) {
        unsafe {
            (*shape).calculateLocalInertia(mass, &mut local_inertia)
        }
    }
    unsafe {
        cpp {
            "auto motionState = new btDefaultMotionState(transform);"
            "btRigidBody::btRigidBodyConstructionInfo rbInfo("
            "    mass, motionState, const_cast<btCollisionShape*>(shape),"
            "    local_inertia);"
            "world.addRigidBody(new btRigidBody(rbInfo));"
        }
    }
}
