/* Generated by Nim Compiler v1.6.6 */
/* Compiled for: Linux, amd64, gcc */
/* Command for C compiler:
   g++ -c -std=gnu++14 -funsigned-char  -w -fmax-errors=3 -fpermissive -O3 -fno-strict-aliasing -fno-ident   -I/home/tjpalmer/apps/nim-1.6.6/lib -I/home/tjpalmer/projects/bullet3/src -I/home/tjpalmer/contextfree/carbonic -o /home/tjpalmer/contextfree/carbonic/nimcache/@mbullet_demo.nim.cpp.o /home/tjpalmer/contextfree/carbonic/nimcache/@mbullet_demo.nim.cpp */
#define NIM_INTBITS 64

#include "nimbase.h"
#include "btBulletDynamicsCommon.h"
#include <exception>
#include <string.h>
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
#define nimfr_(x, y)
#define nimln_(x, y)
struct RootObj;
struct TNimTypeV2;
struct NimStrPayload;
struct NimStringV2;
struct Exception;
struct tySequence__uB9b75OUPRENsBAu4AnoePA;
struct tySequence__uB9b75OUPRENsBAu4AnoePA_Content;
struct tyObject_StackTraceEntry__oLyohQ7O2XOvGnflOss8EA;
struct TNimTypeV2 {
void* destructor;
NI size;
NI align;
NCSTRING name;
void* traceImpl;
void* typeInfoV1;
NI flags;
};
struct RootObj {
TNimTypeV2* m_type;
};
struct NimStrPayload {
NI cap;
NIM_CHAR data[SEQ_DECL_SIZE];
};
struct NimStringV2 {
NI len;
NimStrPayload* p;
};
typedef NimStringV2 tyArray__nHXaesL0DJZHyVS07ARPRA[1];
struct tySequence__uB9b75OUPRENsBAu4AnoePA {
  NI len; tySequence__uB9b75OUPRENsBAu4AnoePA_Content* p;
};
struct Exception : public RootObj {
Exception* parent;
NCSTRING name;
NimStringV2 message;
tySequence__uB9b75OUPRENsBAu4AnoePA trace;
Exception* up;
};
struct tyObject_StackTraceEntry__oLyohQ7O2XOvGnflOss8EA {
NCSTRING procname;
NI line;
NCSTRING filename;
};


#ifndef tySequence__uB9b75OUPRENsBAu4AnoePA_Content_PP
#define tySequence__uB9b75OUPRENsBAu4AnoePA_Content_PP
struct tySequence__uB9b75OUPRENsBAu4AnoePA_Content { NI cap; tyObject_StackTraceEntry__oLyohQ7O2XOvGnflOss8EA data[SEQ_DECL_SIZE];};
#endif

      N_LIB_PRIVATE N_NIMCALL(void, main__bullet95demo_362)(void);
N_LIB_PRIVATE N_NIMCALL(btRigidBody*, initBody__bullet95demo_97)(NF32 mass, btVector3 origin, btCollisionShape& shape);
N_LIB_PRIVATE N_NIMCALL(void, printAll__bullet95demo_201)(btDiscreteDynamicsWorld& world);
N_NIMCALL(NimStringV2, rawNewString)(NI cap);
static N_INLINE(void, appendString)(NimStringV2& dest, NimStringV2 src);
static N_INLINE(void, copyMem__system_1709)(void* dest, void* source, NI size);
static N_INLINE(void, nimCopyMem)(void* dest, void* source, NI size);
N_LIB_PRIVATE N_NOINLINE(void, raiseOverflow)(void);
N_LIB_PRIVATE N_NOINLINE(void, raiseRangeErrorI)(NI64 i, NI64 a, NI64 b);
N_LIB_PRIVATE N_NIMCALL(void, prepareAdd)(NimStringV2& s, NI addlen);
N_LIB_PRIVATE N_NIMCALL(void, formatValue__bullet95demo_238)(NimStringV2& result, NI value, NimStringV2 specifier);
N_LIB_PRIVATE N_NIMCALL(void, formatValue__bullet95demo_280)(NimStringV2& result, NF32 value, NimStringV2 specifier);
N_LIB_PRIVATE N_NIMCALL(void, echoBinSafe)(NimStringV2* args, NI argsLen_0);
N_LIB_PRIVATE N_NIMCALL(void, eqdestroy___system_3263)(NimStringV2& dest);
N_LIB_PRIVATE N_NIMCALL(void, cleanDynamicsWorld__bullet95demo_9)(btDiscreteDynamicsWorld& world);
static N_INLINE(void, initStackBottomWith)(void* locals);
N_LIB_PRIVATE N_NIMCALL(void, systemDatInit000)(void);
N_LIB_PRIVATE N_NIMCALL(void, systemInit000)(void);
N_LIB_PRIVATE N_NIMCALL(void, NimMainModule)(void);
static const struct {
  NI cap; NIM_CHAR data[17+1];
} TM__7YTlMRbv9cV9csqYLwtzOfoA_2 = { 17 | NIM_STRLIT_FLAG, "world pos object " };
static const NimStringV2 TM__7YTlMRbv9cV9csqYLwtzOfoA_3 = {17, (NimStrPayload*)&TM__7YTlMRbv9cV9csqYLwtzOfoA_2};
static const struct {
  NI cap; NIM_CHAR data[0+1];
} TM__7YTlMRbv9cV9csqYLwtzOfoA_6 = { 0 | NIM_STRLIT_FLAG, "" };
static const NimStringV2 TM__7YTlMRbv9cV9csqYLwtzOfoA_7 = {0, (NimStrPayload*)&TM__7YTlMRbv9cV9csqYLwtzOfoA_6};
static const struct {
  NI cap; NIM_CHAR data[3+1];
} TM__7YTlMRbv9cV9csqYLwtzOfoA_8 = { 3 | NIM_STRLIT_FLAG, " = " };
static const NimStringV2 TM__7YTlMRbv9cV9csqYLwtzOfoA_9 = {3, (NimStrPayload*)&TM__7YTlMRbv9cV9csqYLwtzOfoA_8};
static const NimStringV2 TM__7YTlMRbv9cV9csqYLwtzOfoA_10 = {0, (NimStrPayload*)&TM__7YTlMRbv9cV9csqYLwtzOfoA_6};
static const struct {
  NI cap; NIM_CHAR data[1+1];
} TM__7YTlMRbv9cV9csqYLwtzOfoA_11 = { 1 | NIM_STRLIT_FLAG, " " };
static const NimStringV2 TM__7YTlMRbv9cV9csqYLwtzOfoA_12 = {1, (NimStrPayload*)&TM__7YTlMRbv9cV9csqYLwtzOfoA_11};
static const NimStringV2 TM__7YTlMRbv9cV9csqYLwtzOfoA_13 = {0, (NimStrPayload*)&TM__7YTlMRbv9cV9csqYLwtzOfoA_6};
static const NimStringV2 TM__7YTlMRbv9cV9csqYLwtzOfoA_14 = {1, (NimStrPayload*)&TM__7YTlMRbv9cV9csqYLwtzOfoA_11};
static const NimStringV2 TM__7YTlMRbv9cV9csqYLwtzOfoA_15 = {0, (NimStrPayload*)&TM__7YTlMRbv9cV9csqYLwtzOfoA_6};
N_LIB_PRIVATE N_NIMCALL(btRigidBody*, initBody__bullet95demo_97)(NF32 mass, btVector3 origin, btCollisionShape& shape) {
	btRigidBody* result;
	result = (btRigidBody*)0;
	btVector3 localInertia(0.0f, 0.0f, 0.0f);
	btTransform transform;
	transform.setIdentity();
	transform.setOrigin(origin);
	NIM_BOOL isDynamic = !((mass == 0.0f));
	{
		if (!isDynamic) goto LA3_;
{		shape.calculateLocalInertia(mass, localInertia);
}	}
	LA3_: ;
	btDefaultMotionState* motionState = (new btDefaultMotionState(transform));
	btRigidBody::btRigidBodyConstructionInfo rbInfo(mass, (*((btMotionState**) (&(motionState)))), (&shape), localInertia);
	result = (new btRigidBody(rbInfo));
	return result;
}
static N_INLINE(void, nimCopyMem)(void* dest, void* source, NI size) {
	void* T1_ = memcpy(dest, source, ((size_t) (size)));
}
static N_INLINE(void, copyMem__system_1709)(void* dest, void* source, NI size) {
	nimCopyMem(dest, source, size);
}
static N_INLINE(void, appendString)(NimStringV2& dest, NimStringV2 src) {
	{
		NI TM__7YTlMRbv9cV9csqYLwtzOfoA_4;
		NI TM__7YTlMRbv9cV9csqYLwtzOfoA_5;
		if (!(((NI) 0) < src.len)) goto LA3_;
{		if (nimAddInt(src.len, ((NI) 1), &TM__7YTlMRbv9cV9csqYLwtzOfoA_4)) { raiseOverflow(); };
		if (((NI)(TM__7YTlMRbv9cV9csqYLwtzOfoA_4)) < ((NI) 0) || ((NI)(TM__7YTlMRbv9cV9csqYLwtzOfoA_4)) > ((NI) IL64(9223372036854775807))){ raiseRangeErrorI((NI)(TM__7YTlMRbv9cV9csqYLwtzOfoA_4), ((NI) 0), ((NI) IL64(9223372036854775807))); }
		copyMem__system_1709(((void*) ((&(*dest.p).data[dest.len]))), ((void*) ((&(*src.p).data[((NI) 0)]))), ((NI) ((NI)(TM__7YTlMRbv9cV9csqYLwtzOfoA_4))));
		if (nimAddInt(dest.len, src.len, &TM__7YTlMRbv9cV9csqYLwtzOfoA_5)) { raiseOverflow(); };
		dest.len = (NI)(TM__7YTlMRbv9cV9csqYLwtzOfoA_5);
}	}
	LA3_: ;
}
N_LIB_PRIVATE N_NIMCALL(void, printAll__bullet95demo_201)(btDiscreteDynamicsWorld& world) {
	std::exception_ptr T5_ = nullptr;	{
		NI i;
		NI colontmp_;
		i = (NI)0;
		colontmp_ = (NI)0;
		colontmp_ = world.getNumCollisionObjects();
		NI i_2 = ((NI) 0);
		{
			while (1) {
				NimStringV2 fmtRes;
				tyArray__nHXaesL0DJZHyVS07ARPRA T14_;
				NI TM__7YTlMRbv9cV9csqYLwtzOfoA_16;
				if (!(i_2 < colontmp_)) goto LA3;
				fmtRes.len = 0; fmtRes.p = NIM_NIL;
				try {
				i = i_2;
				btCollisionObject* obj = world.getCollisionObjectArray()[i];
				btRigidBody* body = btRigidBody::upcast(obj);
				btTransform transform;
				{
					NIM_BOOL T8_;
					btMotionState* T10_;
					T8_ = (NIM_BOOL)0;
					T8_ = !((body == ((btRigidBody*) NIM_NIL)));
					if (!(T8_)) goto LA9_;
					T10_ = (btMotionState*)0;
					T10_ = body->getMotionState();
					T8_ = !((T10_ == ((btMotionState*) NIM_NIL)));
					LA9_: ;
					if (!T8_) goto LA11_;
{					body->getMotionState()->getWorldTransform(transform);
}				}
				goto LA6_;
				LA11_: ;
				{
					transform = obj->getWorldTransform();
				}
				LA6_: ;
				btVector3 origin = transform.getOrigin();
				fmtRes = rawNewString(((NI) 95));
				prepareAdd(fmtRes, 17);
appendString(fmtRes, TM__7YTlMRbv9cV9csqYLwtzOfoA_3);
				formatValue__bullet95demo_238(fmtRes, i, TM__7YTlMRbv9cV9csqYLwtzOfoA_7);
				prepareAdd(fmtRes, 3);
appendString(fmtRes, TM__7YTlMRbv9cV9csqYLwtzOfoA_9);
				formatValue__bullet95demo_280(fmtRes, origin.getX(), TM__7YTlMRbv9cV9csqYLwtzOfoA_10);
				prepareAdd(fmtRes, 1);
appendString(fmtRes, TM__7YTlMRbv9cV9csqYLwtzOfoA_12);
				formatValue__bullet95demo_280(fmtRes, origin.getY(), TM__7YTlMRbv9cV9csqYLwtzOfoA_13);
				prepareAdd(fmtRes, 1);
appendString(fmtRes, TM__7YTlMRbv9cV9csqYLwtzOfoA_14);
				formatValue__bullet95demo_280(fmtRes, origin.getZ(), TM__7YTlMRbv9cV9csqYLwtzOfoA_15);
				T14_[0] = fmtRes;
				echoBinSafe(T14_, 1);
				if (nimAddInt(i_2, ((NI) 1), &TM__7YTlMRbv9cV9csqYLwtzOfoA_16)) { raiseOverflow(); };
				i_2 = (NI)(TM__7YTlMRbv9cV9csqYLwtzOfoA_16);
				}
				catch (Exception* T6_) {
				T5_ = std::current_exception();
				}
				catch (...) {					T5_ = std::current_exception();
				}
				{
					eqdestroy___system_3263(fmtRes);
					if (T5_) std::rethrow_exception(T5_);
				}
			} LA3: ;
		}
	}
}
N_LIB_PRIVATE N_NIMCALL(void, cleanDynamicsWorld__bullet95demo_9)(btDiscreteDynamicsWorld& world) {
	{
		NI i;
		NI colontmp_;
		NI T2_;
		NI TM__7YTlMRbv9cV9csqYLwtzOfoA_18;
		i = (NI)0;
		colontmp_ = (NI)0;
		T2_ = (NI)0;
		T2_ = world.getNumCollisionObjects();
		if (nimSubInt(T2_, ((NI) 1), &TM__7YTlMRbv9cV9csqYLwtzOfoA_18)) { raiseOverflow(); };
		colontmp_ = (NI)(TM__7YTlMRbv9cV9csqYLwtzOfoA_18);
		NI res = colontmp_;
		{
			while (1) {
				NI TM__7YTlMRbv9cV9csqYLwtzOfoA_19;
				if (!(((NI) 0) <= res)) goto LA4;
				i = res;
				btCollisionObject* obj = world.getCollisionObjectArray()[i];
				btRigidBody* body = btRigidBody::upcast(obj);
				{
					NIM_BOOL T7_;
					btMotionState* T9_;
					T7_ = (NIM_BOOL)0;
					T7_ = !((body == ((btRigidBody*) NIM_NIL)));
					if (!(T7_)) goto LA8_;
					T9_ = (btMotionState*)0;
					T9_ = body->getMotionState();
					T7_ = !((T9_ == ((btMotionState*) NIM_NIL)));
					LA8_: ;
					if (!T7_) goto LA10_;
{					delete body->getMotionState();
}				}
				LA10_: ;
				world.removeCollisionObject(obj);
				delete obj;
				if (nimSubInt(res, ((NI) 1), &TM__7YTlMRbv9cV9csqYLwtzOfoA_19)) { raiseOverflow(); };
				res = (NI)(TM__7YTlMRbv9cV9csqYLwtzOfoA_19);
			} LA4: ;
		}
	}
}
N_LIB_PRIVATE N_NIMCALL(void, main__bullet95demo_362)(void) {
	btSequentialImpulseConstraintSolver T1_;
	std::exception_ptr T3_ = nullptr;	btDefaultCollisionConfiguration collisionConfiguration;
	btCollisionDispatcher dispatcher((&collisionConfiguration));
	btDbvtBroadphase overlappingPairCache;
	btSequentialImpulseConstraintSolver solver = T1_;
	btDiscreteDynamicsWorld world((&dispatcher), (&overlappingPairCache), (&solver), (&collisionConfiguration));
	try {
		btBoxShape groundShape(btVector3(50.0f, 50.0f, 50.0f));
		btSphereShape sphereShape(1.0f);
		btRigidBody* T5_ = initBody__bullet95demo_97(0.0f, btVector3(0.0f, -56.0f, 0.0f), groundShape);
		world.addRigidBody(T5_);
		btRigidBody* T6_ = initBody__bullet95demo_97(1.0f, btVector3(2.0f, 10.0f, 0.0f), sphereShape);
		world.addRigidBody(T6_);
		{
			NI i;
			i = (NI)0;
			NI res = ((NI) 1);
			{
				while (1) {
					NI TM__7YTlMRbv9cV9csqYLwtzOfoA_17;
					if (!(res <= ((NI) 10))) goto LA9;
					i = res;
					world.stepSimulation(0.016666668f, ((NI) 10));
					printAll__bullet95demo_201(world);
					if (nimAddInt(res, ((NI) 1), &TM__7YTlMRbv9cV9csqYLwtzOfoA_17)) { raiseOverflow(); };
					res = (NI)(TM__7YTlMRbv9cV9csqYLwtzOfoA_17);
				} LA9: ;
			}
		}
	}
	catch (Exception* T4_) {
	T3_ = std::current_exception();
	}
	catch (...) {		T3_ = std::current_exception();
	}
	{
		cleanDynamicsWorld__bullet95demo_9(world);
		if (T3_) std::rethrow_exception(T3_);
	}
}
static N_INLINE(void, initStackBottomWith)(void* locals) {
}

N_LIB_PRIVATE void PreMainInner(void) {
}

N_LIB_PRIVATE int cmdCount;
N_LIB_PRIVATE char** cmdLine;
N_LIB_PRIVATE char** gEnv;
N_LIB_PRIVATE void PreMain(void) {
	void (*volatile inner)(void);
	inner = PreMainInner;
	systemDatInit000();
	systemInit000();
	(*inner)();
}

N_LIB_PRIVATE N_CDECL(void, NimMainInner)(void) {
	NimMainModule();
}

N_CDECL(void, NimMain)(void) {
	void (*volatile inner)(void);
	PreMain();
	inner = NimMainInner;
	initStackBottomWith((void *)&inner);
	(*inner)();
}

int main(int argc, char** args, char** env) {
	cmdLine = args;
	cmdCount = argc;
	gEnv = env;
	NimMain();
	return nim_program_result;
}

N_LIB_PRIVATE N_NIMCALL(void, NimMainModule)(void) {
{
	main__bullet95demo_362();
}
}

